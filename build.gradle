plugins {
    id 'java'
    id 'jacoco'
    id 'application'
}

description = 'VRTesteUnitario'
group = 'br.com.vrsoftware'

application {
    mainClass = 'vrtesteunitario.Main'
    applicationName = 'VRTesteUnitario'
}

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

tasks.withType(Test) {
    defaultCharacterEncoding = "UTF-8"
}

tasks.withType(JavaCompile) {
    options.fork = true
    sourceCompatibility = 8
    targetCompatibility = 8
    options.encoding = 'UTF-8'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

repositories {
    mavenCentral()
    maven() {
        name = 'VRFramework'
        url = "https://maven.pkg.github.com/vrsoftbr/vrframework"
        credentials {
            username = project.findProperty("github.user") ?: System.getenv("USERNAME")
            password = project.findProperty("github.token") ?: System.getenv("TOKEN")
        }
    }
}

dependencies {
    
    implementation 'br.com.vrsoftware:vrframework:4.1.+'
    
    implementation 'org.netbeans.api:org-openide-util:RELEASE130'
    
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.+'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.+'
    testImplementation 'org.hamcrest:hamcrest:2.+'
    testImplementation 'org.hamcrest:hamcrest-library:2.+'
    testImplementation "org.mockito:mockito-core:3.+"
    testImplementation "org.mockito:mockito-inline:3.+"
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.+'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
        xml.destination file("${buildDir}/reports/jacoco/jacoco.xml")    
        csv.enabled true
        csv.destination file("${buildDir}/reports/jacoco/jacoco.csv")
    }
    
    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {

}
gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    }
}

